## Procfiles

```
Example Ruby Procfile
```

```yaml
web: bundle exec rackup config.ru -p $PORT
rake: bundle exec rake
worker: bundle exec rake workers:start
```

A Procfile enables you to declare required runtime processes, called process types, for your app.
Procfiles must be named `Procfile` exactly and placed in the root directory of your application.

In a Procfile, you declare one process type per line and use the syntax `PROCESS_TYPE: COMMAND`.

- `PROCESS_TYPE` defines the type of the process.
- `COMMAND` is the command line to launch the process.

#### Procfile use cases

Many buildpacks provide their own process types and commands by default; however, there are special
cases where specifying a custom `COMMAND` is necessary.  Commands can be overwritten by providing a
Procfile with the same process type.

For example, a buildpack may provide a `worker` process type that runs the `rake default:start`
command.  If a Procfile is provided that also contains a `worker` process type, but a different
command such as `rake custom:start`, the `rake custom:start` command will be used.

Some buildpacks, such as Python, that work on a variety of frameworks, do not attempt to provide a
default start command. For these cases, a Procfile should be used to specify any necessary commands
for the app.

#### Web process

`web` is a [special process type](#web-process-type) that is required for all applications.
The `web` `PROCESS_TYPE` must be specified by either the buildpack or the Procfile.

#### Specifying processes in manifest files

Custom process types can also be configured via a manifest file. Read more about
[manifests](#manifests). It is not recommended to specify processes in both a manifest and a
Procfile for the same app.

